[{"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js":"1","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js":"2","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js":"3","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js":"4","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js":"5","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js":"6","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js":"7","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js":"8","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js":"9","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js":"10","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js":"11","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js":"12","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js":"13","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js":"14","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AdminRepository.js":"15","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\UserRepository.js":"16","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Profile\\index.js":"17","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Users\\index.js":"18","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\ListingPage\\index.js":"19"},{"size":245,"mtime":1748861887471,"results":"20","hashOfConfig":"21"},{"size":517,"mtime":1748861887473,"results":"22","hashOfConfig":"21"},{"size":527,"mtime":1748861887465,"results":"23","hashOfConfig":"21"},{"size":9096,"mtime":1749134757578,"results":"24","hashOfConfig":"21"},{"size":6135,"mtime":1749132430680,"results":"25","hashOfConfig":"21"},{"size":8190,"mtime":1749142269725,"results":"26","hashOfConfig":"21"},{"size":171,"mtime":1748861887479,"results":"27","hashOfConfig":"21"},{"size":7766,"mtime":1749139061135,"results":"28","hashOfConfig":"21"},{"size":1825,"mtime":1749140723319,"results":"29","hashOfConfig":"21"},{"size":2251,"mtime":1749138301892,"results":"30","hashOfConfig":"21"},{"size":2307,"mtime":1749140716705,"results":"31","hashOfConfig":"21"},{"size":22171,"mtime":1749249754163,"results":"32","hashOfConfig":"21"},{"size":606,"mtime":1748861887472,"results":"33","hashOfConfig":"21"},{"size":12562,"mtime":1749141631945,"results":"34","hashOfConfig":"21"},{"size":11095,"mtime":1749141577454,"results":"35","hashOfConfig":"21"},{"size":7061,"mtime":1749155958962,"results":"36","hashOfConfig":"21"},{"size":19892,"mtime":1749157409196,"results":"37","hashOfConfig":"21"},{"size":28729,"mtime":1749155985306,"results":"38","hashOfConfig":"21"},{"size":2751,"mtime":1748863273704,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sp1lza",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js",[],["85","86"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js",["87","88"],"import React, { useContext } from 'react'\r\n\r\nimport './style.css'\r\n\r\nfunction Audiobook({ image_url, title, author, book_id, history }) {\r\n\r\n    return (\r\n        <div className=\"item audiobook\" onClick={() => history.push(`/audiobook/${book_id}`)}>\r\n            <img src={image_url?.String} />\r\n            <h2 className=\"title\">\r\n                {title?.String}\r\n            </h2>\r\n            <p className=\"author\">\r\n                By {author?.String}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Audiobook",["89","90"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js",["91","92","93"],"import axios from 'axios'\r\nimport { mockBooks, mockChapters, mockUser } from './mockData'\r\n\r\nconst apiPreifx = \"/api\"\r\n// Update URL untuk sesuai dengan BE-LecSens\r\nconst authApiUrl = \"http://localhost:3160/api/auth\"\r\nconst userApiUrl = \"http://localhost:3160/api/users\"\r\n\r\n// Force menggunakan real API untuk auth\r\nconst isDevelopment = process.env.NODE_ENV === 'development'\r\nconst useMockData = isDevelopment && !process.env.REACT_APP_USE_REAL_API\r\nconst useRealAuthAPI = true // Force real API untuk auth endpoints\r\n\r\n// Mock delay to simulate network\r\nconst mockDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// Set up axios interceptor to include token\r\naxios.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n})\r\n\r\n// Add response interceptor for debugging\r\naxios.interceptors.response.use(\r\n    (response) => {\r\n        console.log('✅ Response received from:', response.config.url)\r\n        console.log('📋 Response status:', response.status)\r\n        console.log('📊 Response data:', response.data)\r\n        return response\r\n    },\r\n    (error) => {\r\n        console.error('❌ Request failed to:', error.config?.url)\r\n        console.error('❌ Error status:', error.response?.status)\r\n        console.error('❌ Error data:', error.response?.data)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// Mock API functions\r\nconst mockAPI = {\r\n    listAllBooks: async () => {\r\n        await mockDelay()\r\n        return {\r\n            status: 200,\r\n            data: {\r\n                books: mockBooks\r\n            }\r\n        }\r\n    },\r\n    \r\n    readBook: async (id) => {\r\n        await mockDelay()\r\n        const book = mockBooks.find(b => b.book_id === id)\r\n        if (!book) {\r\n            return { status: 404, data: null }\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: {\r\n                bookDetails: {\r\n                    title: book.title,\r\n                    author: book.author,\r\n                    image_url: book.image_url\r\n                },\r\n                chapters: mockChapters[id] || []\r\n            }\r\n        }\r\n    },\r\n    \r\n    search: async (params) => {\r\n        await mockDelay()\r\n        let results = mockBooks\r\n        \r\n        if (params.keyword) {\r\n            results = mockBooks.filter(book => \r\n                book.title.String.toLowerCase().includes(params.keyword.toLowerCase()) ||\r\n                book.author.String.toLowerCase().includes(params.keyword.toLowerCase())\r\n            )\r\n        }\r\n        \r\n        if (params.genre) {\r\n            results = mockBooks.filter(book => book.genre === params.genre)\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: results\r\n        }\r\n    },\r\n    \r\n    getCurrentUser: async () => {\r\n        await mockDelay()\r\n        const user = localStorage.getItem('mockUser')\r\n        if (user) {\r\n            return {\r\n                status: 200,\r\n                data: JSON.parse(user)\r\n            }\r\n        }\r\n        throw new Error('No user logged in')\r\n    },\r\n    \r\n    updateSeekTime: async (userId, encodedChapterURL, seekPosition) => {\r\n        await mockDelay()\r\n        const key = `seek_${userId}_${encodedChapterURL}`\r\n        localStorage.setItem(key, seekPosition.toString())\r\n        return { status: 200, data: { success: true } }\r\n    },\r\n    \r\n    getSeek: async (userId, encodedChapterURL) => {\r\n        await mockDelay()\r\n        const key = `seek_${userId}_${encodedChapterURL}`\r\n        const seekTime = localStorage.getItem(key) || 0\r\n        return { status: 200, data: parseInt(seekTime) }\r\n    },\r\n    \r\n    registerUser: async (userData) => {\r\n        await mockDelay()\r\n        // Simulate registration\r\n        const users = JSON.parse(localStorage.getItem('mockUsers') || '[]')\r\n        const existingUser = users.find(u => u.email === userData.email)\r\n        \r\n        if (existingUser) {\r\n            throw {\r\n                response: {\r\n                    status: 400,\r\n                    data: { message: 'User already exists' }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const newUser = {\r\n            id: Date.now().toString(),\r\n            ...userData,\r\n            password: undefined // Don't store password\r\n        }\r\n        \r\n        users.push(newUser)\r\n        localStorage.setItem('mockUsers', JSON.stringify(users))\r\n        \r\n        return {\r\n            status: 201,\r\n            data: {\r\n                success: true,\r\n                message: 'User created successfully'\r\n            }\r\n        }\r\n    },\r\n    \r\n    loginUser: async (credentials) => {\r\n        await mockDelay()\r\n        const users = JSON.parse(localStorage.getItem('mockUsers') || '[]')\r\n        const user = users.find(u => u.email === credentials.email)\r\n        \r\n        if (!user) {\r\n            throw {\r\n                response: {\r\n                    status: 401,\r\n                    data: { message: 'Invalid email or password' }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // In real scenario, we'd verify password\r\n        const mockToken = `mock-token-${Date.now()}`\r\n        const userData = {\r\n            id: user.id,\r\n            email: user.email,\r\n            user_name: user.user_name,\r\n            full_name: user.full_name\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: {\r\n                token: mockToken,\r\n                user: userData\r\n            }\r\n        }\r\n    },\r\n    \r\n    getCurrentUserNew: async () => {\r\n        await mockDelay()\r\n        const token = localStorage.getItem('token')\r\n        const user = localStorage.getItem('user')\r\n        \r\n        if (!token || !user) {\r\n            throw new Error('No token')\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: JSON.parse(user)\r\n        }\r\n    }\r\n}\r\n\r\n// Export functions that switch between mock and real API\r\nexport const listAllBooks = () => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for listAllBooks')\r\n        return mockAPI.listAllBooks()\r\n    }\r\n    return axios.get(`${apiPreifx}/books`)\r\n}\r\n\r\nexport const readBook = (id) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for readBook:', id)\r\n        return mockAPI.readBook(id)\r\n    }\r\n    return axios.get(`${apiPreifx}/books/${id}`)\r\n}\r\n\r\nexport const search = (params) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for search:', params)\r\n        return mockAPI.search(params)\r\n    }\r\n    return axios.get(`${apiPreifx}/search`, { params })\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for getCurrentUser')\r\n        return mockAPI.getCurrentUser()\r\n    }\r\n    return axios.get(`/currentuser`)\r\n}\r\n\r\nexport const updateSeekTime = (userId, encodedChapterURL, seekPosition) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for updateSeekTime')\r\n        return mockAPI.updateSeekTime(userId, encodedChapterURL, seekPosition)\r\n    }\r\n    return axios.post(`${apiPreifx}/user/${userId}/bookchapter/${encodedChapterURL}/seek`, seekPosition)\r\n}\r\n\r\nexport const getSeek = (userId, encodedChapterURL) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for getSeek')\r\n        return mockAPI.getSeek(userId, encodedChapterURL)\r\n    }\r\n    return axios.get(`${apiPreifx}/user/${userId}/bookchapter/${encodedChapterURL}/seek`)\r\n}\r\n\r\n// AUTH ENDPOINTS - FORCE REAL API\r\nexport const registerUser = (userData) => {\r\n    console.log('🚀 Using REAL API for registerUser:', authApiUrl + '/register')\r\n    console.log('📤 Sending data:', userData)\r\n    return axios.post(`${authApiUrl}/register`, userData)\r\n}\r\n\r\nexport const loginUser = (credentials) => {\r\n    console.log('🚀 Using REAL API for loginUser:', authApiUrl + '/login')\r\n    console.log('📤 Sending credentials:', { email: credentials.email, password: '***' })\r\n    return axios.post(`${authApiUrl}/login`, credentials)\r\n}\r\n\r\n// USER PROFILE ENDPOINTS\r\nexport const getUserProfile = () => {\r\n    console.log('🚀 Using REAL API for getUserProfile:', userApiUrl + '/profile')\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(new Error('No token'))\r\n    return axios.get(`${userApiUrl}/profile`)\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    console.log('🚀 Using REAL API for logoutUser:', userApiUrl + '/logout')\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(new Error('No token'))\r\n    return axios.post(`${userApiUrl}/logout`)\r\n}\r\n\r\n// Legacy function - keep for compatibility\r\nexport const getCurrentUserNew = () => {\r\n    if (useMockData && !useRealAuthAPI) {\r\n        console.log('🔧 Using mock data for getCurrentUserNew')\r\n        return mockAPI.getCurrentUserNew()\r\n    }\r\n    return getUserProfile() // Use the correct profile endpoint\r\n}","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js",[],["94","95"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js",[],["96","97"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js",["98","99"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AdminRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\UserRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Profile\\index.js",["100"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Users\\index.js",["101"],"import React, { useState, useEffect, useContext, useCallback } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { GlobalContext } from '../../../contexts'\r\nimport UserRepository from '../../../repositories/UserRepository'\r\nimport './adminUsers.css'\r\n\r\nfunction AdminUsers() {\r\n    const history = useHistory()\r\n    const { user } = useContext(GlobalContext)\r\n    const [users, setUsers] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [totalPages, setTotalPages] = useState(1)\r\n    const [totalUsers, setTotalUsers] = useState(0)\r\n    const [selectedRole, setSelectedRole] = useState('')\r\n    const [selectedStatus, setSelectedStatus] = useState('')\r\n    const [debugInfo, setDebugInfo] = useState('')\r\n\r\n    // Modal states\r\n    const [showEditModal, setShowEditModal] = useState(false)\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n    const [selectedUser, setSelectedUser] = useState(null)\r\n    const [editFormData, setEditFormData] = useState({\r\n        userName: '',\r\n        email: '',\r\n        full_name: '',\r\n        alamat: ''\r\n    })\r\n    const [processing, setProcessing] = useState(false)\r\n\r\n    const itemsPerPage = 20\r\n\r\n    const loadUsers = useCallback(async () => {\r\n        try {\r\n            setLoading(true)\r\n            setError('')\r\n            setDebugInfo('Starting to load users...')\r\n            \r\n            console.log('=== AdminUsers: loadUsers START ===')\r\n            console.log('Current user:', user)\r\n            console.log('Token in localStorage:', localStorage.getItem('token') ? 'EXISTS' : 'NOT FOUND')\r\n            \r\n            const result = await UserRepository.getAllUsersForAdmin(\r\n                currentPage, \r\n                itemsPerPage, \r\n                searchTerm\r\n            )\r\n            \r\n            console.log('AdminUsers: UserRepository result:', result)\r\n            setDebugInfo(`Received ${result.users.length} users from API (Total: ${result.total})`)\r\n            \r\n            // Filter by role and status if selected\r\n            let filteredUsers = result.users\r\n            if (selectedRole) {\r\n                filteredUsers = filteredUsers.filter(u => u.role === selectedRole)\r\n                setDebugInfo(prev => prev + ` | Filtered by role: ${filteredUsers.length} users`)\r\n            }\r\n            if (selectedStatus) {\r\n                filteredUsers = filteredUsers.filter(u => u.status === selectedStatus)\r\n                setDebugInfo(prev => prev + ` | Filtered by status: ${filteredUsers.length} users`)\r\n            }\r\n\r\n            setUsers(filteredUsers)\r\n            setTotalUsers(result.total)\r\n            setTotalPages(result.totalPages)\r\n            \r\n            console.log(`AdminUsers: Final filtered users count: ${filteredUsers.length}`)\r\n            console.log('AdminUsers: Users data:', filteredUsers)\r\n            console.log('=== AdminUsers: loadUsers END ===')\r\n            \r\n            if (result.users.length === 0 && result.total === 0) {\r\n                setDebugInfo('No users found in API response. Check backend logs.')\r\n            }\r\n        } catch (error) {\r\n            console.error('=== AdminUsers: loadUsers ERROR ===')\r\n            console.error('Error:', error)\r\n            console.error('Error message:', error.message)\r\n            console.error('Error response:', error.response)\r\n            \r\n            setError(`Failed to load users: ${error.message}`)\r\n            setDebugInfo(`Error: ${error.message}`)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }, [currentPage, searchTerm, selectedRole, selectedStatus, user])\r\n\r\n    useEffect(() => {\r\n        document.title = \"User Management | Admin Dashboard\"\r\n        \r\n        console.log('=== AdminUsers: Component mounted ===')\r\n        console.log('Current user:', user)\r\n        console.log('User role:', user?.role)\r\n        \r\n        // Check if user is admin\r\n        if (!user || (user.role !== 'ADMIN' && user.role !== 'SUPERADMIN')) {\r\n            console.log('AdminUsers: Access denied, redirecting to /admin')\r\n            setError('Access denied. Only ADMIN and SUPERADMIN can access this page.')\r\n            history.push('/admin')\r\n            return\r\n        }\r\n\r\n        loadUsers()\r\n    }, [user, history, loadUsers])\r\n\r\n    // Modal handlers\r\n    const handleEditUser = (userItem) => {\r\n        setSelectedUser(userItem)\r\n        setEditFormData({\r\n            userName: userItem.user_name || '',\r\n            email: userItem.email || '',\r\n            full_name: userItem.full_name || '',\r\n            alamat: userItem.alamat || ''\r\n        })\r\n        setShowEditModal(true)\r\n    }\r\n\r\n    const handleDeleteUser = (userItem) => {\r\n        setSelectedUser(userItem)\r\n        setShowDeleteModal(true)\r\n    }\r\n\r\n    const handleEditSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (!selectedUser) return\r\n\r\n        try {\r\n            setProcessing(true)\r\n            setError('')\r\n\r\n            await UserRepository.updateUser(selectedUser.id, editFormData)\r\n            \r\n            // Refresh users list\r\n            await loadUsers()\r\n            \r\n            // Close modal\r\n            setShowEditModal(false)\r\n            setSelectedUser(null)\r\n            \r\n            // Show success message\r\n            alert('User updated successfully!')\r\n        } catch (error) {\r\n            console.error('Error updating user:', error)\r\n            setError(error.message)\r\n        } finally {\r\n            setProcessing(false)\r\n        }\r\n    }\r\n\r\n    const handleDeleteConfirm = async () => {\r\n        if (!selectedUser) return\r\n\r\n        try {\r\n            setProcessing(true)\r\n            setError('')\r\n\r\n            await UserRepository.deleteUser(selectedUser.id)\r\n            \r\n            // Refresh users list\r\n            await loadUsers()\r\n            \r\n            // Close modal\r\n            setShowDeleteModal(false)\r\n            setSelectedUser(null)\r\n            \r\n            // Show success message\r\n            alert('User deleted successfully!')\r\n        } catch (error) {\r\n            console.error('Error deleting user:', error)\r\n            setError(error.message)\r\n        } finally {\r\n            setProcessing(false)\r\n        }\r\n    }\r\n\r\n    const handleCloseModal = () => {\r\n        setShowEditModal(false)\r\n        setShowDeleteModal(false)\r\n        setSelectedUser(null)\r\n        setEditFormData({\r\n            userName: '',\r\n            email: '',\r\n            full_name: '',\r\n            alamat: ''\r\n        })\r\n    }\r\n\r\n    // Event handlers\r\n    const handleSearch = (e) => {\r\n        setSearchTerm(e.target.value)\r\n        setCurrentPage(1) // Reset to first page\r\n    }\r\n\r\n    const handleRoleFilter = (e) => {\r\n        setSelectedRole(e.target.value)\r\n        setCurrentPage(1)\r\n    }\r\n\r\n    const handleStatusFilter = (e) => {\r\n        setSelectedStatus(e.target.value)\r\n        setCurrentPage(1)\r\n    }\r\n\r\n    const handlePageChange = (newPage) => {\r\n        setCurrentPage(newPage)\r\n    }\r\n\r\n    const getUserInitials = (user) => {\r\n        if (user.full_name) {\r\n            return user.full_name\r\n                .split(' ')\r\n                .map(name => name.charAt(0))\r\n                .join('')\r\n                .toUpperCase()\r\n                .substring(0, 2)\r\n        }\r\n        return user.user_name?.substring(0, 2)?.toUpperCase() || 'U'\r\n    }\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString || dateString === '0001-01-01T00:00:00Z') return 'Never'\r\n        return new Date(dateString).toLocaleDateString()\r\n    }\r\n\r\n    return (\r\n        <div className=\"admin-container\">\r\n            <header className=\"admin-header\">\r\n                <div className=\"admin-header-content\">\r\n                    <Link to=\"/admin\" className=\"admin-logo-link\">\r\n                        <img \r\n                            src=\"/assets/new-logo.svg\" \r\n                            alt=\"The Book Hub\" \r\n                            className=\"admin-logo\"\r\n                        />\r\n                    </Link>\r\n                    <div className=\"admin-user-info\">\r\n                        <span className=\"admin-welcome\">\r\n                            {user?.full_name || user?.username || 'Admin'}\r\n                        </span>\r\n                        <span className=\"admin-role-badge\">\r\n                            {user?.role || 'ADMIN'}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n\r\n            <main className=\"admin-main\">\r\n                <div className=\"admin-sidebar\">\r\n                    <nav className=\"admin-nav\">\r\n                        <Link to=\"/admin\" className=\"admin-nav-link\">\r\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                <path d=\"M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z\"/>\r\n                            </svg>\r\n                            Dashboard\r\n                        </Link>\r\n                        <Link to=\"/admin/audiobooks\" className=\"admin-nav-link\">\r\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n                            </svg>\r\n                            Manage Audiobooks\r\n                        </Link>\r\n                        <Link to=\"/admin/users\" className=\"admin-nav-link active\">\r\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                <path d=\"M16 7c0-2.21-1.79-4-4-4S8 4.79 8 7s1.79 4 4 4 4-1.79 4-4zM12 13c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z\"/>\r\n                            </svg>\r\n                            Manage Users\r\n                        </Link>\r\n                        <Link to=\"/admin/analytics\" className=\"admin-nav-link\">\r\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\r\n                            </svg>\r\n                            Analytics\r\n                        </Link>\r\n                    </nav>\r\n                </div>\r\n\r\n                <div className=\"admin-content\">\r\n                    <div className=\"admin-page-header\">\r\n                        <h1>User Management</h1>\r\n                        <p>Manage platform users, roles, and permissions</p>\r\n                    </div>\r\n\r\n                    {/* Error Display */}\r\n                    {error && (\r\n                        <div className=\"error-banner\">\r\n                            <strong>Error:</strong> {error}\r\n                            <button onClick={() => setError('')} className=\"error-close\">×</button>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Filters and Search */}\r\n                    <div className=\"users-controls\">\r\n                        <div className=\"search-box\">\r\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                            </svg>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search users by name or email...\"\r\n                                value={searchTerm}\r\n                                onChange={handleSearch}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"filters\">\r\n                            <select value={selectedRole} onChange={handleRoleFilter}>\r\n                                <option value=\"\">All Roles</option>\r\n                                <option value=\"SUPERADMIN\">Super Admin</option>\r\n                                <option value=\"ADMIN\">Admin</option>\r\n                                <option value=\"USER\">User</option>\r\n                            </select>\r\n\r\n                            <select value={selectedStatus} onChange={handleStatusFilter}>\r\n                                <option value=\"\">All Status</option>\r\n                                <option value=\"active\">Active</option>\r\n                                <option value=\"pending\">Pending</option>\r\n                                <option value=\"inactive\">Inactive</option>\r\n                            </select>\r\n\r\n                            <button onClick={loadUsers} className=\"refresh-btn\" disabled={loading}>\r\n                                {loading ? 'Loading...' : 'Refresh'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Users Statistics */}\r\n                    <div className=\"users-stats\">\r\n                        <div className=\"stat-item\">\r\n                            <span className=\"stat-number\">{totalUsers}</span>\r\n                            <span className=\"stat-label\">Total Users</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            <span className=\"stat-number\">{users.filter(u => u.status === 'active').length}</span>\r\n                            <span className=\"stat-label\">Active</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            <span className=\"stat-number\">{users.filter(u => u.status === 'pending').length}</span>\r\n                            <span className=\"stat-label\">Pending</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            <span className=\"stat-number\">{users.filter(u => u.role === 'ADMIN').length}</span>\r\n                            <span className=\"stat-label\">Admins</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Loading State */}\r\n                    {loading && (\r\n                        <div className=\"loading-state\">\r\n                            <div className=\"loading-spinner\"></div>\r\n                            <p>Loading users via UserRepository...</p>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Users Table */}\r\n                    {!loading && (\r\n                        <div className=\"users-table-container\">\r\n                            {users.length > 0 ? (\r\n                                <table className=\"users-table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>User</th>\r\n                                            <th>Email</th>\r\n                                            <th>Role</th>\r\n                                            <th>Status</th>\r\n                                            <th>Verified</th>\r\n                                            <th>Created</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {users.map(userItem => (\r\n                                            <tr key={userItem.id}>\r\n                                                <td>\r\n                                                    <div className=\"user-info\">\r\n                                                        <div className=\"user-avatar\">\r\n                                                            {getUserInitials(userItem)}\r\n                                                        </div>\r\n                                                        <div className=\"user-details\">\r\n                                                            <div className=\"user-name\">{userItem.full_name}</div>\r\n                                                            <div className=\"user-username\">@{userItem.user_name}</div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td>{userItem.email}</td>\r\n                                                <td>\r\n                                                    <span style={{\r\n                                                        color: userItem.role === 'SUPERADMIN' ? '#dc2626' : userItem.role === 'ADMIN' ? '#2563eb' : '#059669',\r\n                                                        backgroundColor: userItem.role === 'SUPERADMIN' ? '#fef2f2' : userItem.role === 'ADMIN' ? '#eff6ff' : '#ecfdf5',\r\n                                                        padding: '4px 8px',\r\n                                                        borderRadius: '4px',\r\n                                                        fontSize: '12px',\r\n                                                        fontWeight: '500'\r\n                                                    }}>\r\n                                                        {userItem.role}\r\n                                                    </span>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <span style={{\r\n                                                        color: userItem.status === 'active' ? '#10b981' : userItem.status === 'pending' ? '#f59e0b' : '#ef4444',\r\n                                                        backgroundColor: userItem.status === 'active' ? '#ecfdf5' : userItem.status === 'pending' ? '#fffbeb' : '#fef2f2',\r\n                                                        padding: '4px 8px',\r\n                                                        borderRadius: '4px',\r\n                                                        fontSize: '12px',\r\n                                                        fontWeight: '500'\r\n                                                    }}>\r\n                                                        {userItem.status || 'Unknown'}\r\n                                                    </span>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <span className={`verification-badge ${userItem.is_verified ? 'verified' : 'unverified'}`}>\r\n                                                        {userItem.is_verified ? 'Verified' : 'Unverified'}\r\n                                                    </span>\r\n                                                </td>\r\n                                                <td>{formatDate(userItem.created_at)}</td>\r\n                                                <td>\r\n                                                    <div className=\"action-buttons\">\r\n                                                        <button \r\n                                                            className=\"action-btn edit-btn\"\r\n                                                            onClick={() => handleEditUser(userItem)}\r\n                                                            disabled={processing}\r\n                                                            title=\"Edit User\"\r\n                                                        >\r\n                                                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                                <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\r\n                                                            </svg>\r\n                                                        </button>\r\n                                                        <button \r\n                                                            className=\"action-btn delete-btn\"\r\n                                                            onClick={() => handleDeleteUser(userItem)}\r\n                                                            disabled={processing}\r\n                                                            title=\"Delete User\"\r\n                                                        >\r\n                                                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                                <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/>\r\n                                                            </svg>\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            ) : (\r\n                                <div className=\"no-users\">\r\n                                    <h3>No users found</h3>\r\n                                    <p>CORS issue resolved. Click \"Test API Direct\" to manually load users.</p>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Pagination */}\r\n                    {totalPages > 1 && (\r\n                        <div className=\"pagination\">\r\n                            <button\r\n                                onClick={() => handlePageChange(currentPage - 1)}\r\n                                disabled={currentPage === 1}\r\n                                className=\"pagination-btn\"\r\n                            >\r\n                                Previous\r\n                            </button>\r\n                            \r\n                            <span className=\"pagination-info\">\r\n                                Page {currentPage} of {totalPages}\r\n                            </span>\r\n                            \r\n                            <button\r\n                                onClick={() => handlePageChange(currentPage + 1)}\r\n                                disabled={currentPage === totalPages}\r\n                                className=\"pagination-btn\"\r\n                            >\r\n                                Next\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </main>\r\n\r\n            {/* Edit User Modal */}\r\n            {showEditModal && (\r\n                <div className=\"modal-overlay\" onClick={handleCloseModal}>\r\n                    <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n                        <div className=\"modal-header\">\r\n                            <h3>Edit User</h3>\r\n                            <button className=\"modal-close\" onClick={handleCloseModal}>×</button>\r\n                        </div>\r\n                        <form onSubmit={handleEditSubmit}>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"userName\">Username</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"userName\"\r\n                                        value={editFormData.userName}\r\n                                        onChange={(e) => setEditFormData(prev => ({...prev, userName: e.target.value}))}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\">Email</label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        value={editFormData.email}\r\n                                        onChange={(e) => setEditFormData(prev => ({...prev, email: e.target.value}))}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"full_name\">Full Name</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"full_name\"\r\n                                        value={editFormData.full_name}\r\n                                        onChange={(e) => setEditFormData(prev => ({...prev, full_name: e.target.value}))}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"alamat\">Address</label>\r\n                                    <textarea\r\n                                        id=\"alamat\"\r\n                                        value={editFormData.alamat}\r\n                                        onChange={(e) => setEditFormData(prev => ({...prev, alamat: e.target.value}))}\r\n                                        rows=\"3\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn-cancel\" onClick={handleCloseModal}>\r\n                                    Cancel\r\n                                </button>\r\n                                <button type=\"submit\" className=\"btn-save\" disabled={processing}>\r\n                                    {processing ? 'Saving...' : 'Save Changes'}\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Delete User Modal */}\r\n            {showDeleteModal && (\r\n                <div className=\"modal-overlay\" onClick={handleCloseModal}>\r\n                    <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n                        <div className=\"modal-header\">\r\n                            <h3>Delete User</h3>\r\n                            <button className=\"modal-close\" onClick={handleCloseModal}>×</button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <p>Are you sure you want to delete this user?</p>\r\n                            <div className=\"user-info-preview\">\r\n                                <strong>{selectedUser?.full_name}</strong><br/>\r\n                                <span>{selectedUser?.email}</span><br/>\r\n                                <span>@{selectedUser?.user_name}</span>\r\n                            </div>\r\n                            <p className=\"warning-text\">This action cannot be undone.</p>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn-cancel\" onClick={handleCloseModal}>\r\n                                Cancel\r\n                            </button>\r\n                            <button \r\n                                type=\"button\" \r\n                                className=\"btn-delete\" \r\n                                onClick={handleDeleteConfirm}\r\n                                disabled={processing}\r\n                            >\r\n                                {processing ? 'Deleting...' : 'Delete User'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminUsers","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\ListingPage\\index.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":27},{"ruleId":"110","severity":1,"message":"111","line":9,"column":13,"nodeType":"112","endLine":9,"endColumn":44},{"ruleId":"102","replacedBy":"113"},{"ruleId":"104","replacedBy":"114"},{"ruleId":"106","severity":1,"message":"115","line":2,"column":35,"nodeType":"108","messageId":"109","endLine":2,"endColumn":43},{"ruleId":"116","severity":1,"message":"117","line":128,"column":13,"nodeType":"118","messageId":"119","endLine":133,"endColumn":14},{"ruleId":"116","severity":1,"message":"117","line":160,"column":13,"nodeType":"118","messageId":"119","endLine":165,"endColumn":14},{"ruleId":"102","replacedBy":"120"},{"ruleId":"104","replacedBy":"121"},{"ruleId":"102","replacedBy":"122"},{"ruleId":"104","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":22,"column":8,"nodeType":"126","endLine":22,"endColumn":21,"suggestions":"127"},{"ruleId":"106","severity":1,"message":"128","line":109,"column":11,"nodeType":"108","messageId":"109","endLine":109,"endColumn":21},{"ruleId":"106","severity":1,"message":"129","line":105,"column":19,"nodeType":"108","messageId":"109","endLine":105,"endColumn":33},{"ruleId":"106","severity":1,"message":"130","line":19,"column":12,"nodeType":"108","messageId":"109","endLine":19,"endColumn":21},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["131"],["132"],"'mockUser' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object",["131"],["132"],["131"],["132"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAudiobooks'. Either include it or remove the dependency array.","ArrayExpression",["133"],"'formatDate' is assigned a value but never used.","'updatedProfile' is assigned a value but never used.","'debugInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},"Update the dependencies array to be: [currentPage, fetchAudiobooks]",{"range":"136","text":"137"},[850,863],"[currentPage, fetchAudiobooks]"]