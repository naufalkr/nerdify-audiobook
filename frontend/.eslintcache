[{"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js":"1","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js":"2","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js":"3","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js":"4","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js":"5","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js":"6","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js":"7","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js":"8","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js":"9","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js":"10","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js":"11","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js":"12","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js":"13","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js":"14"},{"size":245,"mtime":1748861887471,"results":"15","hashOfConfig":"16"},{"size":517,"mtime":1748861887473,"results":"17","hashOfConfig":"16"},{"size":527,"mtime":1748861887465,"results":"18","hashOfConfig":"16"},{"size":9096,"mtime":1749134757578,"results":"19","hashOfConfig":"16"},{"size":6135,"mtime":1749132430680,"results":"20","hashOfConfig":"16"},{"size":8210,"mtime":1749138930825,"results":"21","hashOfConfig":"16"},{"size":171,"mtime":1748861887479,"results":"22","hashOfConfig":"16"},{"size":7766,"mtime":1749139061135,"results":"23","hashOfConfig":"16"},{"size":1825,"mtime":1749140723319,"results":"24","hashOfConfig":"16"},{"size":2251,"mtime":1749138301892,"results":"25","hashOfConfig":"16"},{"size":2307,"mtime":1749140716705,"results":"26","hashOfConfig":"16"},{"size":7345,"mtime":1749140491874,"results":"27","hashOfConfig":"16"},{"size":606,"mtime":1748861887472,"results":"28","hashOfConfig":"16"},{"size":8315,"mtime":1749140731554,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sp1lza",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js",["60","61"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js",["62","63","64"],"import axios from 'axios'\r\nimport { mockBooks, mockChapters, mockUser } from './mockData'\r\n\r\nconst apiPreifx = \"/api\"\r\n// Update URL untuk sesuai dengan BE-LecSens\r\nconst authApiUrl = \"http://localhost:3160/api/auth\"\r\nconst userApiUrl = \"http://localhost:3160/api/users\"\r\n\r\n// Force menggunakan real API untuk auth\r\nconst isDevelopment = process.env.NODE_ENV === 'development'\r\nconst useMockData = isDevelopment && !process.env.REACT_APP_USE_REAL_API\r\nconst useRealAuthAPI = true // Force real API untuk auth endpoints\r\n\r\n// Mock delay to simulate network\r\nconst mockDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// Set up axios interceptor to include token\r\naxios.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n})\r\n\r\n// Add response interceptor for debugging\r\naxios.interceptors.response.use(\r\n    (response) => {\r\n        console.log('✅ Response received from:', response.config.url)\r\n        console.log('📋 Response status:', response.status)\r\n        console.log('📊 Response data:', response.data)\r\n        return response\r\n    },\r\n    (error) => {\r\n        console.error('❌ Request failed to:', error.config?.url)\r\n        console.error('❌ Error status:', error.response?.status)\r\n        console.error('❌ Error data:', error.response?.data)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// Mock API functions\r\nconst mockAPI = {\r\n    listAllBooks: async () => {\r\n        await mockDelay()\r\n        return {\r\n            status: 200,\r\n            data: {\r\n                books: mockBooks\r\n            }\r\n        }\r\n    },\r\n    \r\n    readBook: async (id) => {\r\n        await mockDelay()\r\n        const book = mockBooks.find(b => b.book_id === id)\r\n        if (!book) {\r\n            return { status: 404, data: null }\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: {\r\n                bookDetails: {\r\n                    title: book.title,\r\n                    author: book.author,\r\n                    image_url: book.image_url\r\n                },\r\n                chapters: mockChapters[id] || []\r\n            }\r\n        }\r\n    },\r\n    \r\n    search: async (params) => {\r\n        await mockDelay()\r\n        let results = mockBooks\r\n        \r\n        if (params.keyword) {\r\n            results = mockBooks.filter(book => \r\n                book.title.String.toLowerCase().includes(params.keyword.toLowerCase()) ||\r\n                book.author.String.toLowerCase().includes(params.keyword.toLowerCase())\r\n            )\r\n        }\r\n        \r\n        if (params.genre) {\r\n            results = mockBooks.filter(book => book.genre === params.genre)\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: results\r\n        }\r\n    },\r\n    \r\n    getCurrentUser: async () => {\r\n        await mockDelay()\r\n        const user = localStorage.getItem('mockUser')\r\n        if (user) {\r\n            return {\r\n                status: 200,\r\n                data: JSON.parse(user)\r\n            }\r\n        }\r\n        throw new Error('No user logged in')\r\n    },\r\n    \r\n    updateSeekTime: async (userId, encodedChapterURL, seekPosition) => {\r\n        await mockDelay()\r\n        const key = `seek_${userId}_${encodedChapterURL}`\r\n        localStorage.setItem(key, seekPosition.toString())\r\n        return { status: 200, data: { success: true } }\r\n    },\r\n    \r\n    getSeek: async (userId, encodedChapterURL) => {\r\n        await mockDelay()\r\n        const key = `seek_${userId}_${encodedChapterURL}`\r\n        const seekTime = localStorage.getItem(key) || 0\r\n        return { status: 200, data: parseInt(seekTime) }\r\n    },\r\n    \r\n    registerUser: async (userData) => {\r\n        await mockDelay()\r\n        // Simulate registration\r\n        const users = JSON.parse(localStorage.getItem('mockUsers') || '[]')\r\n        const existingUser = users.find(u => u.email === userData.email)\r\n        \r\n        if (existingUser) {\r\n            throw {\r\n                response: {\r\n                    status: 400,\r\n                    data: { message: 'User already exists' }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const newUser = {\r\n            id: Date.now().toString(),\r\n            ...userData,\r\n            password: undefined // Don't store password\r\n        }\r\n        \r\n        users.push(newUser)\r\n        localStorage.setItem('mockUsers', JSON.stringify(users))\r\n        \r\n        return {\r\n            status: 201,\r\n            data: {\r\n                success: true,\r\n                message: 'User created successfully'\r\n            }\r\n        }\r\n    },\r\n    \r\n    loginUser: async (credentials) => {\r\n        await mockDelay()\r\n        const users = JSON.parse(localStorage.getItem('mockUsers') || '[]')\r\n        const user = users.find(u => u.email === credentials.email)\r\n        \r\n        if (!user) {\r\n            throw {\r\n                response: {\r\n                    status: 401,\r\n                    data: { message: 'Invalid email or password' }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // In real scenario, we'd verify password\r\n        const mockToken = `mock-token-${Date.now()}`\r\n        const userData = {\r\n            id: user.id,\r\n            email: user.email,\r\n            user_name: user.user_name,\r\n            full_name: user.full_name\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: {\r\n                token: mockToken,\r\n                user: userData\r\n            }\r\n        }\r\n    },\r\n    \r\n    getCurrentUserNew: async () => {\r\n        await mockDelay()\r\n        const token = localStorage.getItem('token')\r\n        const user = localStorage.getItem('user')\r\n        \r\n        if (!token || !user) {\r\n            throw new Error('No token')\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: JSON.parse(user)\r\n        }\r\n    }\r\n}\r\n\r\n// Export functions that switch between mock and real API\r\nexport const listAllBooks = () => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for listAllBooks')\r\n        return mockAPI.listAllBooks()\r\n    }\r\n    return axios.get(`${apiPreifx}/books`)\r\n}\r\n\r\nexport const readBook = (id) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for readBook:', id)\r\n        return mockAPI.readBook(id)\r\n    }\r\n    return axios.get(`${apiPreifx}/books/${id}`)\r\n}\r\n\r\nexport const search = (params) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for search:', params)\r\n        return mockAPI.search(params)\r\n    }\r\n    return axios.get(`${apiPreifx}/search`, { params })\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for getCurrentUser')\r\n        return mockAPI.getCurrentUser()\r\n    }\r\n    return axios.get(`/currentuser`)\r\n}\r\n\r\nexport const updateSeekTime = (userId, encodedChapterURL, seekPosition) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for updateSeekTime')\r\n        return mockAPI.updateSeekTime(userId, encodedChapterURL, seekPosition)\r\n    }\r\n    return axios.post(`${apiPreifx}/user/${userId}/bookchapter/${encodedChapterURL}/seek`, seekPosition)\r\n}\r\n\r\nexport const getSeek = (userId, encodedChapterURL) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for getSeek')\r\n        return mockAPI.getSeek(userId, encodedChapterURL)\r\n    }\r\n    return axios.get(`${apiPreifx}/user/${userId}/bookchapter/${encodedChapterURL}/seek`)\r\n}\r\n\r\n// AUTH ENDPOINTS - FORCE REAL API\r\nexport const registerUser = (userData) => {\r\n    console.log('🚀 Using REAL API for registerUser:', authApiUrl + '/register')\r\n    console.log('📤 Sending data:', userData)\r\n    return axios.post(`${authApiUrl}/register`, userData)\r\n}\r\n\r\nexport const loginUser = (credentials) => {\r\n    console.log('🚀 Using REAL API for loginUser:', authApiUrl + '/login')\r\n    console.log('📤 Sending credentials:', { email: credentials.email, password: '***' })\r\n    return axios.post(`${authApiUrl}/login`, credentials)\r\n}\r\n\r\n// USER PROFILE ENDPOINTS\r\nexport const getUserProfile = () => {\r\n    console.log('🚀 Using REAL API for getUserProfile:', userApiUrl + '/profile')\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(new Error('No token'))\r\n    return axios.get(`${userApiUrl}/profile`)\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    console.log('🚀 Using REAL API for logoutUser:', userApiUrl + '/logout')\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(new Error('No token'))\r\n    return axios.post(`${userApiUrl}/logout`)\r\n}\r\n\r\n// Legacy function - keep for compatibility\r\nexport const getCurrentUserNew = () => {\r\n    if (useMockData && !useRealAuthAPI) {\r\n        console.log('🔧 Using mock data for getCurrentUserNew')\r\n        return mockAPI.getCurrentUserNew()\r\n    }\r\n    return getUserProfile() // Use the correct profile endpoint\r\n}","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js",[],["65","66"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js",[],{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":9,"column":13,"nodeType":"73","endLine":9,"endColumn":44},{"ruleId":"67","severity":1,"message":"74","line":2,"column":35,"nodeType":"69","messageId":"70","endLine":2,"endColumn":43},{"ruleId":"75","severity":1,"message":"76","line":128,"column":13,"nodeType":"77","messageId":"78","endLine":133,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":160,"column":13,"nodeType":"77","messageId":"78","endLine":165,"endColumn":14},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'mockUser' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-global-assign","no-unsafe-negation"]