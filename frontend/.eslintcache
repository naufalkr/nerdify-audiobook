[{"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js":"1","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js":"2","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js":"3","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js":"4","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js":"5","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js":"6","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js":"7","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js":"8","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js":"9","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js":"10","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js":"11","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js":"12","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js":"13","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js":"14","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AdminRepository.js":"15","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\UserRepository.js":"16","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Profile\\index.js":"17","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Users\\index.js":"18","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\ListingPage\\index.js":"19","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\SystemRepository.js":"20","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AudiobooksRepository.js":"21","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\CatalogRepository.js":"22","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\index.js":"23","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Player\\index.js":"24","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\GenreAudiobooks\\index.js":"25","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Audiobook\\index.js":"26","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Register\\index.js":"27","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Search\\index.js":"28","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\repositoryLogger.js":"29","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\PlaybackRepository.js":"30","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\SingletonLogger\\SingletonLogger.js":"31","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\BaseRepository.js":"32"},{"size":245,"mtime":1749312616136,"results":"33","hashOfConfig":"34"},{"size":517,"mtime":1748861887473,"results":"35","hashOfConfig":"34"},{"size":1465,"mtime":1749304526358,"results":"36","hashOfConfig":"34"},{"size":9096,"mtime":1749305366918,"results":"37","hashOfConfig":"34"},{"size":6135,"mtime":1749132430680,"results":"38","hashOfConfig":"34"},{"size":8984,"mtime":1749471716991,"results":"39","hashOfConfig":"34"},{"size":171,"mtime":1748861887479,"results":"40","hashOfConfig":"34"},{"size":7771,"mtime":1749377473316,"results":"41","hashOfConfig":"34"},{"size":14387,"mtime":1749314820538,"results":"42","hashOfConfig":"34"},{"size":2251,"mtime":1749138301892,"results":"43","hashOfConfig":"34"},{"size":3257,"mtime":1749475170257,"results":"44","hashOfConfig":"34"},{"size":66620,"mtime":1749469076944,"results":"45","hashOfConfig":"34"},{"size":606,"mtime":1748861887472,"results":"46","hashOfConfig":"34"},{"size":10828,"mtime":1749302294076,"results":"47","hashOfConfig":"34"},{"size":14891,"mtime":1749475260144,"results":"48","hashOfConfig":"34"},{"size":6059,"mtime":1749475914141,"results":"49","hashOfConfig":"34"},{"size":19892,"mtime":1749157409196,"results":"50","hashOfConfig":"34"},{"size":33215,"mtime":1749377497411,"results":"51","hashOfConfig":"34"},{"size":12773,"mtime":1749377497411,"results":"52","hashOfConfig":"34"},{"size":15633,"mtime":1749476086766,"results":"53","hashOfConfig":"34"},{"size":11002,"mtime":1749475952707,"results":"54","hashOfConfig":"34"},{"size":3556,"mtime":1749474177315,"results":"55","hashOfConfig":"34"},{"size":1182,"mtime":1749474156520,"results":"56","hashOfConfig":"34"},{"size":18462,"mtime":1749315204734,"results":"57","hashOfConfig":"34"},{"size":19406,"mtime":1749471505839,"results":"58","hashOfConfig":"34"},{"size":12616,"mtime":1749312430437,"results":"59","hashOfConfig":"34"},{"size":9041,"mtime":1749377457376,"results":"60","hashOfConfig":"34"},{"size":3521,"mtime":1749377468725,"results":"61","hashOfConfig":"34"},{"size":2031,"mtime":1749476287350,"results":"62","hashOfConfig":"34"},{"size":8857,"mtime":1749471683816,"results":"63","hashOfConfig":"34"},{"size":10295,"mtime":1749475078142,"results":"64","hashOfConfig":"34"},{"size":4695,"mtime":1749476277980,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sp1lza",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js",[],["135","136"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js",["137","138","139"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js",["140"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js",["141"],"import React, { createContext, useState, useRef, useEffect } from 'react'\r\n\r\nconst GlobalContext = createContext()\r\n\r\nfunction GlobalProvider({ children }) {\r\n    const [user, setUser] = useState(() => {\r\n        const savedUser = localStorage.getItem('user')\r\n        return savedUser ? JSON.parse(savedUser) : null\r\n    })\r\n\r\n    const [currentAudio, setCurrentAudio] = useState(() => {\r\n        const savedAudio = localStorage.getItem('currentAudio')\r\n        return savedAudio ? JSON.parse(savedAudio) : null\r\n    })\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [currentTime, setCurrentTime] = useState(0)\r\n    const [duration, setDuration] = useState(0)\r\n    const [volume, setVolume] = useState(() => {\r\n        const savedVolume = localStorage.getItem('audioVolume')\r\n        return savedVolume ? parseFloat(savedVolume) : 1\r\n    })\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const audioRef = useRef(null)\r\n\r\n    // Save current audio to localStorage when it changes\r\n    useEffect(() => {\r\n        if (currentAudio) {\r\n            localStorage.setItem('currentAudio', JSON.stringify(currentAudio))\r\n        } else {\r\n            localStorage.removeItem('currentAudio')\r\n        }\r\n    }, [currentAudio])\r\n\r\n    // Save volume to localStorage when it changes\r\n    useEffect(() => {\r\n        localStorage.setItem('audioVolume', volume.toString())\r\n    }, [volume])\r\n\r\n    const login = (userData) => {\r\n        setUser(userData)\r\n        localStorage.setItem('user', JSON.stringify(userData))\r\n    }\r\n\r\n    const logout = () => {\r\n        setUser(null)\r\n        setCurrentAudio(null)\r\n        localStorage.removeItem('user')\r\n        localStorage.removeItem('currentAudio')\r\n        \r\n        // Stop and reset audio\r\n        if (audioRef.current) {\r\n            audioRef.current.pause()\r\n            audioRef.current.currentTime = 0\r\n            audioRef.current.src = ''\r\n        }\r\n        setIsPlaying(false)\r\n        setCurrentTime(0)\r\n        setDuration(0)\r\n        setError(null)\r\n    }\r\n\r\n    const playAudio = async (audioData) => {\r\n        try {\r\n            setIsLoading(true)\r\n            setError(null)\r\n\r\n            console.log('=== Playing Audio ===')\r\n            console.log('Audio Data:', audioData)\r\n            console.log('Chapter URL:', audioData.chapter?.url)\r\n\r\n            // Validate audio data\r\n            if (!audioData || !audioData.chapter || !audioData.chapter.url) {\r\n                throw new Error('Invalid audio data: Missing URL')\r\n            }\r\n\r\n            let audioUrl = audioData.chapter.url\r\n\r\n            // Transform archive.org URLs to be more reliable\r\n            if (audioUrl.includes('www.archive.org')) {\r\n                // Try HTTPS first\r\n                audioUrl = audioUrl.replace('http://www.archive.org', 'https://archive.org')\r\n                console.log('Transformed URL to HTTPS:', audioUrl)\r\n            }\r\n\r\n            // Alternative URL patterns for archive.org\r\n            if (audioUrl.includes('archive.org')) {\r\n                const originalUrl = audioUrl\r\n                // Try direct download URL format\r\n                if (audioUrl.includes('/download/')) {\r\n                    audioUrl = originalUrl.replace('archive.org/download/', 'ia800604.us.archive.org/17/')\r\n                    console.log('Trying alternative archive.org URL:', audioUrl)\r\n                }\r\n            }\r\n\r\n            // Test URL accessibility with multiple methods\r\n            console.log('Testing URL accessibility:', audioUrl)\r\n            let urlAccessible = false\r\n            \r\n            try {\r\n                // Method 1: Try HEAD request\r\n                const headResponse = await fetch(audioUrl, { \r\n                    method: 'HEAD',\r\n                    mode: 'no-cors'\r\n                })\r\n                console.log('HEAD request response:', headResponse)\r\n                urlAccessible = true\r\n            } catch (headError) {\r\n                console.warn('HEAD request failed:', headError.message)\r\n                \r\n                try {\r\n                    // Method 2: Try GET with range\r\n                    const rangeResponse = await fetch(audioUrl, {\r\n                        headers: { 'Range': 'bytes=0-1023' },\r\n                        mode: 'no-cors'\r\n                    })\r\n                    console.log('Range request response:', rangeResponse)\r\n                    urlAccessible = true\r\n                } catch (rangeError) {\r\n                    console.warn('Range request failed:', rangeError.message)\r\n                    console.log('Proceeding anyway - some servers block preflight requests')\r\n                }\r\n            }\r\n\r\n            // Set current audio data\r\n            const newAudioData = {\r\n                trackId: audioData.trackId,\r\n                bookTitle: audioData.bookTitle,\r\n                chapter: {\r\n                    title: audioData.chapter.title,\r\n                    url: audioUrl,\r\n                    duration: audioData.chapter.duration\r\n                }\r\n            }\r\n\r\n            setCurrentAudio(newAudioData)\r\n\r\n            // If audio element exists, load the new source\r\n            if (audioRef.current) {\r\n                // Stop current playback\r\n                audioRef.current.pause()\r\n                audioRef.current.currentTime = 0\r\n\r\n                // Clear previous source and all event listeners\r\n                audioRef.current.src = ''\r\n                audioRef.current.load()\r\n                \r\n                // Wait a bit for cleanup\r\n                await new Promise(resolve => setTimeout(resolve, 100))\r\n\r\n                // Set new source with better error handling\r\n                console.log('Setting audio source:', audioUrl)\r\n                audioRef.current.src = audioUrl\r\n                \r\n                // Important: Remove crossOrigin for external URLs\r\n                audioRef.current.removeAttribute('crossorigin')\r\n                \r\n                // Set preload mode\r\n                audioRef.current.preload = 'auto' // Changed from 'metadata' to 'auto'\r\n                \r\n                // Add comprehensive error handling\r\n                const handleLoadSuccess = () => {\r\n                    console.log('Audio loaded successfully, ready state:', audioRef.current.readyState)\r\n                    audioRef.current.removeEventListener('canplay', handleLoadSuccess)\r\n                    audioRef.current.removeEventListener('error', handleLoadError)\r\n                    audioRef.current.removeEventListener('loadedmetadata', handleLoadSuccess)\r\n                    \r\n                    playWhenReady()\r\n                }\r\n\r\n                const handleLoadError = (e) => {\r\n                    console.error('Audio load error details:', {\r\n                        error: e,\r\n                        audioError: audioRef.current.error,\r\n                        errorCode: audioRef.current.error?.code,\r\n                        errorMessage: audioRef.current.error?.message,\r\n                        readyState: audioRef.current.readyState,\r\n                        networkState: audioRef.current.networkState,\r\n                        src: audioRef.current.src,\r\n                        currentSrc: audioRef.current.currentSrc\r\n                    })\r\n                    \r\n                    audioRef.current.removeEventListener('canplay', handleLoadSuccess)\r\n                    audioRef.current.removeEventListener('error', handleLoadError)\r\n                    audioRef.current.removeEventListener('loadedmetadata', handleLoadSuccess)\r\n                    \r\n                    let errorMessage = 'Failed to load audio'\r\n                    \r\n                    if (audioRef.current.error) {\r\n                        switch (audioRef.current.error.code) {\r\n                            case 1: // MEDIA_ERR_ABORTED\r\n                                errorMessage = 'Audio loading was aborted. Try again.'\r\n                                break\r\n                            case 2: // MEDIA_ERR_NETWORK\r\n                                errorMessage = 'Network error. Please check your connection and try again.'\r\n                                break\r\n                            case 3: // MEDIA_ERR_DECODE\r\n                                errorMessage = 'Audio format error. The file may be corrupted or in an unsupported format.'\r\n                                break\r\n                            case 4: // MEDIA_ERR_SRC_NOT_SUPPORTED\r\n                                errorMessage = 'Audio format not supported by this browser. Try a different browser.'\r\n                                break\r\n                            default:\r\n                                errorMessage = audioRef.current.error.message || 'Unknown audio error'\r\n                        }\r\n                    }\r\n                    \r\n                    // Try fallback URL if original fails\r\n                    if (audioUrl.includes('ia800604.us.archive.org') && !audioUrl.includes('retry')) {\r\n                        console.log('Trying original archive.org URL as fallback...')\r\n                        const fallbackUrl = audioData.chapter.url.replace('http://www.archive.org', 'https://archive.org') + '?retry=1'\r\n                        audioRef.current.src = fallbackUrl\r\n                        audioRef.current.load()\r\n                        return\r\n                    }\r\n                    \r\n                    setError(errorMessage)\r\n                    setIsLoading(false)\r\n                }\r\n\r\n                // Add event listeners before loading\r\n                audioRef.current.addEventListener('canplay', handleLoadSuccess)\r\n                audioRef.current.addEventListener('loadedmetadata', handleLoadSuccess)\r\n                audioRef.current.addEventListener('error', handleLoadError)\r\n                \r\n                // Load the audio\r\n                console.log('Loading audio...')\r\n                audioRef.current.load()\r\n\r\n                // Wait for audio to be ready and then play\r\n                const playWhenReady = () => {\r\n                    audioRef.current.play()\r\n                        .then(() => {\r\n                            console.log('Audio started playing successfully')\r\n                            setIsPlaying(true)\r\n                            setIsLoading(false)\r\n                        })\r\n                        .catch((err) => {\r\n                            console.error('Error playing audio:', err)\r\n                            \r\n                            // Handle specific play errors\r\n                            let playErrorMessage = 'Failed to play audio'\r\n                            if (err.name === 'NotAllowedError') {\r\n                                playErrorMessage = 'Playback blocked by browser. Please click play again.'\r\n                            } else if (err.name === 'NotSupportedError') {\r\n                                playErrorMessage = 'Audio format not supported by this browser'\r\n                            } else if (err.name === 'AbortError') {\r\n                                playErrorMessage = 'Playback was aborted'\r\n                            } else {\r\n                                playErrorMessage = `Playback error: ${err.message}`\r\n                            }\r\n                            \r\n                            setError(playErrorMessage)\r\n                            setIsLoading(false)\r\n                        })\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.error('Error in playAudio:', err)\r\n            setError(`Failed to play audio: ${err.message}`)\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const pauseAudio = () => {\r\n        if (audioRef.current && !audioRef.current.paused) {\r\n            audioRef.current.pause()\r\n        }\r\n    }\r\n\r\n    const resumeAudio = () => {\r\n        if (audioRef.current) {\r\n            audioRef.current.play()\r\n                .then(() => {\r\n                    setIsPlaying(true)\r\n                })\r\n                .catch((err) => {\r\n                    console.error('Error resuming audio:', err)\r\n                    setError(`Failed to resume audio: ${err.message}`)\r\n                })\r\n        }\r\n    }\r\n\r\n    const seekTo = (time) => {\r\n        if (audioRef.current && !isNaN(time) && time >= 0) {\r\n            audioRef.current.currentTime = time\r\n            setCurrentTime(time)\r\n        }\r\n    }\r\n\r\n    const changeVolume = (newVolume) => {\r\n        if (audioRef.current && newVolume >= 0 && newVolume <= 1) {\r\n            audioRef.current.volume = newVolume\r\n            setVolume(newVolume)\r\n        }\r\n    }\r\n\r\n    const stopAudio = () => {\r\n        if (audioRef.current) {\r\n            audioRef.current.pause()\r\n            audioRef.current.currentTime = 0\r\n        }\r\n        setIsPlaying(false)\r\n        setCurrentTime(0)\r\n        setCurrentAudio(null)\r\n        setError(null)\r\n    }\r\n\r\n    // Format time helper\r\n    const formatTime = (seconds) => {\r\n        if (!seconds || isNaN(seconds)) return '0:00'\r\n        \r\n        const hours = Math.floor(seconds / 3600)\r\n        const minutes = Math.floor((seconds % 3600) / 60)\r\n        const secs = Math.floor(seconds % 60)\r\n        \r\n        if (hours > 0) {\r\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\r\n        }\r\n        return `${minutes}:${secs.toString().padStart(2, '0')}`\r\n    }\r\n\r\n    const value = {\r\n        // User state\r\n        user,\r\n        setUser, \r\n        login,\r\n        logout,\r\n        \r\n        // Audio state\r\n        currentAudio,\r\n        setCurrentAudio,\r\n        isPlaying,\r\n        currentTime,\r\n        duration,\r\n        volume,\r\n        isLoading,\r\n        error,\r\n        audioRef,\r\n        \r\n        // Audio controls\r\n        playAudio,\r\n        pauseAudio,\r\n        resumeAudio,\r\n        seekTo,\r\n        changeVolume,\r\n        stopAudio,\r\n        \r\n        // Setters for audio events\r\n        setIsPlaying,\r\n        setCurrentTime,\r\n        setDuration,\r\n        setError,\r\n        setIsLoading,\r\n        \r\n        // Helpers\r\n        formatTime\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={value}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\nexport { GlobalContext, GlobalProvider }","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js",["142"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js",["143"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AdminRepository.js",["144","145","146"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\UserRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Profile\\index.js",["147"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport UserRepository from '../../repositories/UserRepository'\r\nimport { GlobalContext } from '../../contexts'\r\nimport './profile.css'\r\n\r\nfunction Profile() {\r\n    const history = useHistory()\r\n    const { user, setUser } = useContext(GlobalContext)\r\n    const [profile, setProfile] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [updating, setUpdating] = useState(false)\r\n    const [editFormData, setEditFormData] = useState({\r\n        userName: '',\r\n        email: '',\r\n        full_name: '',\r\n        alamat: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        document.title = \"Profile | Nerdify Audiobook\"\r\n        \r\n        // Redirect if not logged in\r\n        if (!user) {\r\n            history.push('/login')\r\n            return\r\n        }\r\n\r\n        loadProfile()\r\n    }, [user, history])\r\n\r\n    const loadProfile = async () => {\r\n        try {\r\n            setLoading(true)\r\n            console.log('Profile: Loading user profile via UserRepository...')\r\n            \r\n            // Use UserRepository instead of direct API call\r\n            const userData = await UserRepository.getCurrentUser()\r\n            \r\n            if (userData) {\r\n                console.log('Profile: UserRepository profile loaded:', userData)\r\n                setProfile(userData)\r\n                // Initialize edit form with current data\r\n                setEditFormData({\r\n                    userName: userData.user_name || '',\r\n                    email: userData.email || '',\r\n                    full_name: userData.full_name || '',\r\n                    alamat: userData.alamat || ''\r\n                })\r\n            } else {\r\n                throw new Error('No profile data received')\r\n            }\r\n        } catch (err) {\r\n            console.error('Profile: Error loading profile via UserRepository:', err)\r\n            setError('Failed to load profile')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleEditToggle = () => {\r\n        if (isEditing) {\r\n            // Cancel editing - reset form data\r\n            setEditFormData({\r\n                userName: profile.user_name || '',\r\n                email: profile.email || '',\r\n                full_name: profile.full_name || '',\r\n                alamat: profile.alamat || ''\r\n            })\r\n        }\r\n        setIsEditing(!isEditing)\r\n        setError('')\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target\r\n        setEditFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        // Validate form\r\n        if (!editFormData.userName.trim() || !editFormData.email.trim() || !editFormData.full_name.trim()) {\r\n            setError('Username, email, and full name are required')\r\n            return\r\n        }\r\n\r\n        // Email validation\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n        if (!emailRegex.test(editFormData.email)) {\r\n            setError('Please enter a valid email address')\r\n            return\r\n        }\r\n\r\n        try {\r\n            setUpdating(true)\r\n            setError('')\r\n\r\n            const updatedProfile = await UserRepository.updateUserProfile(editFormData)\r\n            \r\n            // Update local profile state\r\n            const newProfileData = {\r\n                ...profile,\r\n                user_name: editFormData.userName,\r\n                email: editFormData.email,\r\n                full_name: editFormData.full_name,\r\n                alamat: editFormData.alamat\r\n            }\r\n            \r\n            setProfile(newProfileData)\r\n            \r\n            // Update global context and localStorage\r\n            const updatedUser = {\r\n                ...user,\r\n                user_name: editFormData.userName,\r\n                email: editFormData.email,\r\n                full_name: editFormData.full_name,\r\n                alamat: editFormData.alamat\r\n            }\r\n            setUser(updatedUser)\r\n            localStorage.setItem('user', JSON.stringify(updatedUser))\r\n            \r\n            // Exit edit mode\r\n            setIsEditing(false)\r\n            \r\n            // Show success message\r\n            alert('Profile updated successfully!')\r\n            \r\n        } catch (error) {\r\n            console.error('Error updating profile:', error)\r\n            setError(error.message)\r\n        } finally {\r\n            setUpdating(false)\r\n        }\r\n    }\r\n\r\n    const getUserInitials = () => {\r\n        if (profile?.full_name) {\r\n            return profile.full_name\r\n                .split(' ')\r\n                .map(name => name.charAt(0))\r\n                .join('')\r\n                .toUpperCase()\r\n                .substring(0, 2)\r\n        }\r\n        if (profile?.user_name) {\r\n            return profile.user_name.substring(0, 2).toUpperCase()\r\n        }\r\n        return \"U\"\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"profile-container\">\r\n                <div className=\"profile-loading\">\r\n                    <div className=\"loading-spinner\"></div>\r\n                    <p>Loading profile via UserRepository...</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error && !profile) {\r\n        return (\r\n            <div className=\"profile-container\">\r\n                <div className=\"profile-error\">\r\n                    <h2>Error Loading Profile</h2>\r\n                    <p>{error || 'Profile not found'}</p>\r\n                    <button onClick={loadProfile} className=\"retry-btn\">\r\n                        Retry with UserRepository\r\n                    </button>\r\n                    <button onClick={() => history.push('/')} className=\"back-btn\">\r\n                        Go Back Home\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-container\">\r\n            <div className=\"profile-wrapper\">\r\n                <div className=\"profile-header\">\r\n                    <button onClick={() => history.goBack()} className=\"back-button\">\r\n                        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                            <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"/>\r\n                        </svg>\r\n                        Back\r\n                    </button>\r\n                    <h1>Profile Settings</h1>\r\n                    <div className=\"profile-actions\">\r\n                        <button \r\n                            onClick={handleEditToggle} \r\n                            className={`edit-profile-btn ${isEditing ? 'cancel' : 'edit'}`}\r\n                            disabled={updating}\r\n                        >\r\n                            {isEditing ? (\r\n                                <>\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\r\n                                    </svg>\r\n                                    Cancel\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                        <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\r\n                                    </svg>\r\n                                    Edit Profile\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                    <small style={{ color: '#94a3b8' }}>Powered by UserRepository Pattern</small>\r\n                </div>\r\n\r\n                {/* Error Display */}\r\n                {error && (\r\n                    <div className=\"profile-error-banner\">\r\n                        <strong>Error:</strong> {error}\r\n                        <button onClick={() => setError('')} className=\"error-close\">×</button>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"profile-content\">\r\n                    <div className=\"profile-avatar-section\">\r\n                        <div className=\"profile-avatar\">\r\n                            {getUserInitials()}\r\n                        </div>\r\n                        <div className=\"profile-basic-info\">\r\n                            <h2>{profile.full_name}</h2>\r\n                            <p className=\"profile-username\">@{profile.user_name}</p>\r\n                            <span className={`profile-role ${profile.role?.toLowerCase()}`}>\r\n                                {profile.role}\r\n                            </span>\r\n                            {profile.is_verified && (\r\n                                <span className=\"verified-badge\">\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n                                    </svg>\r\n                                    Verified\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {isEditing ? (\r\n                        /* Edit Form */\r\n                        <form onSubmit={handleSubmit} className=\"profile-edit-form\">\r\n                            <div className=\"profile-section\">\r\n                                <h3>Edit Personal Information</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field\">\r\n                                        <label htmlFor=\"full_name\">Full Name *</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"full_name\"\r\n                                            name=\"full_name\"\r\n                                            value={editFormData.full_name}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            className=\"profile-input\"\r\n                                            placeholder=\"Enter your full name\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label htmlFor=\"userName\">Username *</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"userName\"\r\n                                            name=\"userName\"\r\n                                            value={editFormData.userName}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            className=\"profile-input\"\r\n                                            placeholder=\"Enter your username\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label htmlFor=\"email\">Email *</label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            id=\"email\"\r\n                                            name=\"email\"\r\n                                            value={editFormData.email}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            className=\"profile-input\"\r\n                                            placeholder=\"Enter your email\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-field full-width\">\r\n                                        <label htmlFor=\"alamat\">Address</label>\r\n                                        <textarea\r\n                                            id=\"alamat\"\r\n                                            name=\"alamat\"\r\n                                            value={editFormData.alamat}\r\n                                            onChange={handleInputChange}\r\n                                            className=\"profile-textarea\"\r\n                                            placeholder=\"Enter your address\"\r\n                                            rows=\"3\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"profile-form-actions\">\r\n                                <button \r\n                                    type=\"button\" \r\n                                    onClick={handleEditToggle}\r\n                                    className=\"btn-cancel\"\r\n                                    disabled={updating}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button \r\n                                    type=\"submit\" \r\n                                    className=\"btn-save\"\r\n                                    disabled={updating}\r\n                                >\r\n                                    {updating ? (\r\n                                        <>\r\n                                            <div className=\"btn-spinner\"></div>\r\n                                            Updating...\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n                                            </svg>\r\n                                            Save Changes\r\n                                        </>\r\n                                    )}\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    ) : (\r\n                        /* View Mode */\r\n                        <div className=\"profile-details\">\r\n                            <div className=\"profile-section\">\r\n                                <h3>Personal Information</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Full Name</label>\r\n                                        <div className=\"field-value\">{profile.full_name}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Username</label>\r\n                                        <div className=\"field-value\">{profile.user_name}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Email</label>\r\n                                        <div className=\"field-value\">{profile.email}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Role</label>\r\n                                        <div className=\"field-value\">{profile.role}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"profile-section\">\r\n                                <h3>Location Information</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field full-width\">\r\n                                        <label>Address</label>\r\n                                        <div className=\"field-value\">{profile.alamat || 'Not specified'}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Latitude</label>\r\n                                        <div className=\"field-value\">{profile.latitude || 'Not specified'}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Longitude</label>\r\n                                        <div className=\"field-value\">{profile.longitude || 'Not specified'}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"profile-section\">\r\n                                <h3>Account Status</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Verification Status</label>\r\n                                        <div className={`field-value status ${profile.is_verified ? 'verified' : 'unverified'}`}>\r\n                                            {profile.is_verified ? (\r\n                                                <>\r\n                                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n                                                    </svg>\r\n                                                    Verified\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n                                                    </svg>\r\n                                                    Not Verified\r\n                                                </>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Account ID</label>\r\n                                        <div className=\"field-value monospace\">{profile.id}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile",["148","149"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Users\\index.js",["150"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\ListingPage\\index.js",["151","152"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\SystemRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AudiobooksRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\CatalogRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Player\\index.js",[],["153","154"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\GenreAudiobooks\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Audiobook\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Register\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Search\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\repositoryLogger.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\PlaybackRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\SingletonLogger\\SingletonLogger.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\BaseRepository.js",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":2,"column":35,"nodeType":"161","messageId":"162","endLine":2,"endColumn":43},{"ruleId":"163","severity":1,"message":"164","line":128,"column":13,"nodeType":"165","messageId":"166","endLine":133,"endColumn":14},{"ruleId":"163","severity":1,"message":"164","line":160,"column":13,"nodeType":"165","messageId":"166","endLine":165,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":103,"column":8,"nodeType":"169","endLine":103,"endColumn":17,"suggestions":"170"},{"ruleId":"159","severity":1,"message":"171","line":120,"column":21,"nodeType":"161","messageId":"162","endLine":120,"endColumn":34},{"ruleId":"167","severity":1,"message":"172","line":68,"column":8,"nodeType":"169","endLine":68,"endColumn":21,"suggestions":"173"},{"ruleId":"159","severity":1,"message":"174","line":94,"column":11,"nodeType":"161","messageId":"162","endLine":94,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":230,"column":5,"nodeType":"177","messageId":"178","endLine":255,"endColumn":6},{"ruleId":"175","severity":1,"message":"179","line":301,"column":5,"nodeType":"177","messageId":"178","endLine":331,"endColumn":6},{"ruleId":"175","severity":1,"message":"176","line":334,"column":5,"nodeType":"177","messageId":"178","endLine":359,"endColumn":6},{"ruleId":"159","severity":1,"message":"180","line":105,"column":19,"nodeType":"161","messageId":"162","endLine":105,"endColumn":33},{"ruleId":"155","replacedBy":"181"},{"ruleId":"157","replacedBy":"182"},{"ruleId":"159","severity":1,"message":"183","line":19,"column":12,"nodeType":"161","messageId":"162","endLine":19,"endColumn":21},{"ruleId":"159","severity":1,"message":"184","line":12,"column":12,"nodeType":"161","messageId":"162","endLine":12,"endColumn":18},{"ruleId":"159","severity":1,"message":"185","line":83,"column":11,"nodeType":"161","messageId":"162","endLine":83,"endColumn":27},{"ruleId":"155","replacedBy":"186"},{"ruleId":"157","replacedBy":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'mockUser' is defined but never used.","Identifier","unusedVar","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'profileLoaded' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["190"],"'urlAccessible' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchQuery'. Either include it or remove the dependency array.",["191"],"'getStatusIcon' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getSystemStats'.","MethodDefinition","unexpected","Duplicate name 'getRealTimeStats'.","'updatedProfile' is assigned a value but never used.",["188"],["189"],"'debugInfo' is assigned a value but never used.","'loaded' is assigned a value but never used.","'handleMoreGenres' is assigned a value but never used.",["188"],["189"],"no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [profileLoaded, setUser, user]",{"range":"196","text":"197"},"Update the dependencies array to be: [currentPage, searchQuery]",{"range":"198","text":"199"},[4103,4112],"[profileLoaded, setUser, user]",[2699,2712],"[currentPage, searchQuery]"]