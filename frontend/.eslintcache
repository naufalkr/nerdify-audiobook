[{"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js":"1","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js":"2","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js":"3","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js":"4","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js":"5","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js":"6","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js":"7","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js":"8","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js":"9","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js":"10","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js":"11","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js":"12","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js":"13","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js":"14","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AdminRepository.js":"15","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\UserRepository.js":"16","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Profile\\index.js":"17","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Users\\index.js":"18","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\ListingPage\\index.js":"19","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\SystemRepository.js":"20","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AudiobooksRepository.js":"21"},{"size":245,"mtime":1748861887471,"results":"22","hashOfConfig":"23"},{"size":517,"mtime":1748861887473,"results":"24","hashOfConfig":"23"},{"size":527,"mtime":1748861887465,"results":"25","hashOfConfig":"23"},{"size":9096,"mtime":1749134757578,"results":"26","hashOfConfig":"23"},{"size":6135,"mtime":1749132430680,"results":"27","hashOfConfig":"23"},{"size":8190,"mtime":1749142269725,"results":"28","hashOfConfig":"23"},{"size":171,"mtime":1748861887479,"results":"29","hashOfConfig":"23"},{"size":7766,"mtime":1749139061135,"results":"30","hashOfConfig":"23"},{"size":1825,"mtime":1749140723319,"results":"31","hashOfConfig":"23"},{"size":2251,"mtime":1749138301892,"results":"32","hashOfConfig":"23"},{"size":2307,"mtime":1749140716705,"results":"33","hashOfConfig":"23"},{"size":45593,"mtime":1749299844137,"results":"34","hashOfConfig":"23"},{"size":606,"mtime":1748861887472,"results":"35","hashOfConfig":"23"},{"size":12557,"mtime":1749254068437,"results":"36","hashOfConfig":"23"},{"size":11095,"mtime":1749141577454,"results":"37","hashOfConfig":"23"},{"size":7061,"mtime":1749155958962,"results":"38","hashOfConfig":"23"},{"size":19892,"mtime":1749157409196,"results":"39","hashOfConfig":"23"},{"size":33210,"mtime":1749253782931,"results":"40","hashOfConfig":"23"},{"size":2751,"mtime":1748863273704,"results":"41","hashOfConfig":"23"},{"size":12162,"mtime":1749141597225,"results":"42","hashOfConfig":"23"},{"size":7664,"mtime":1749299491922,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sp1lza",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\WrapperPage\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\index.js",[],["94","95"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\Audiobook\\index.js",["96","97"],"import React, { useContext } from 'react'\r\n\r\nimport './style.css'\r\n\r\nfunction Audiobook({ image_url, title, author, book_id, history }) {\r\n\r\n    return (\r\n        <div className=\"item audiobook\" onClick={() => history.push(`/audiobook/${book_id}`)}>\r\n            <img src={image_url?.String} />\r\n            <h2 className=\"title\">\r\n                {title?.String}\r\n            </h2>\r\n            <p className=\"author\">\r\n                By {author?.String}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Audiobook",["98","99"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\index.js",["100","101","102"],"import axios from 'axios'\r\nimport { mockBooks, mockChapters, mockUser } from './mockData'\r\n\r\nconst apiPreifx = \"/api\"\r\n// Update URL untuk sesuai dengan BE-LecSens\r\nconst authApiUrl = \"http://localhost:3160/api/auth\"\r\nconst userApiUrl = \"http://localhost:3160/api/users\"\r\n\r\n// Force menggunakan real API untuk auth\r\nconst isDevelopment = process.env.NODE_ENV === 'development'\r\nconst useMockData = isDevelopment && !process.env.REACT_APP_USE_REAL_API\r\nconst useRealAuthAPI = true // Force real API untuk auth endpoints\r\n\r\n// Mock delay to simulate network\r\nconst mockDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// Set up axios interceptor to include token\r\naxios.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n})\r\n\r\n// Add response interceptor for debugging\r\naxios.interceptors.response.use(\r\n    (response) => {\r\n        console.log('✅ Response received from:', response.config.url)\r\n        console.log('📋 Response status:', response.status)\r\n        console.log('📊 Response data:', response.data)\r\n        return response\r\n    },\r\n    (error) => {\r\n        console.error('❌ Request failed to:', error.config?.url)\r\n        console.error('❌ Error status:', error.response?.status)\r\n        console.error('❌ Error data:', error.response?.data)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// Mock API functions\r\nconst mockAPI = {\r\n    listAllBooks: async () => {\r\n        await mockDelay()\r\n        return {\r\n            status: 200,\r\n            data: {\r\n                books: mockBooks\r\n            }\r\n        }\r\n    },\r\n    \r\n    readBook: async (id) => {\r\n        await mockDelay()\r\n        const book = mockBooks.find(b => b.book_id === id)\r\n        if (!book) {\r\n            return { status: 404, data: null }\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: {\r\n                bookDetails: {\r\n                    title: book.title,\r\n                    author: book.author,\r\n                    image_url: book.image_url\r\n                },\r\n                chapters: mockChapters[id] || []\r\n            }\r\n        }\r\n    },\r\n    \r\n    search: async (params) => {\r\n        await mockDelay()\r\n        let results = mockBooks\r\n        \r\n        if (params.keyword) {\r\n            results = mockBooks.filter(book => \r\n                book.title.String.toLowerCase().includes(params.keyword.toLowerCase()) ||\r\n                book.author.String.toLowerCase().includes(params.keyword.toLowerCase())\r\n            )\r\n        }\r\n        \r\n        if (params.genre) {\r\n            results = mockBooks.filter(book => book.genre === params.genre)\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: results\r\n        }\r\n    },\r\n    \r\n    getCurrentUser: async () => {\r\n        await mockDelay()\r\n        const user = localStorage.getItem('mockUser')\r\n        if (user) {\r\n            return {\r\n                status: 200,\r\n                data: JSON.parse(user)\r\n            }\r\n        }\r\n        throw new Error('No user logged in')\r\n    },\r\n    \r\n    updateSeekTime: async (userId, encodedChapterURL, seekPosition) => {\r\n        await mockDelay()\r\n        const key = `seek_${userId}_${encodedChapterURL}`\r\n        localStorage.setItem(key, seekPosition.toString())\r\n        return { status: 200, data: { success: true } }\r\n    },\r\n    \r\n    getSeek: async (userId, encodedChapterURL) => {\r\n        await mockDelay()\r\n        const key = `seek_${userId}_${encodedChapterURL}`\r\n        const seekTime = localStorage.getItem(key) || 0\r\n        return { status: 200, data: parseInt(seekTime) }\r\n    },\r\n    \r\n    registerUser: async (userData) => {\r\n        await mockDelay()\r\n        // Simulate registration\r\n        const users = JSON.parse(localStorage.getItem('mockUsers') || '[]')\r\n        const existingUser = users.find(u => u.email === userData.email)\r\n        \r\n        if (existingUser) {\r\n            throw {\r\n                response: {\r\n                    status: 400,\r\n                    data: { message: 'User already exists' }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const newUser = {\r\n            id: Date.now().toString(),\r\n            ...userData,\r\n            password: undefined // Don't store password\r\n        }\r\n        \r\n        users.push(newUser)\r\n        localStorage.setItem('mockUsers', JSON.stringify(users))\r\n        \r\n        return {\r\n            status: 201,\r\n            data: {\r\n                success: true,\r\n                message: 'User created successfully'\r\n            }\r\n        }\r\n    },\r\n    \r\n    loginUser: async (credentials) => {\r\n        await mockDelay()\r\n        const users = JSON.parse(localStorage.getItem('mockUsers') || '[]')\r\n        const user = users.find(u => u.email === credentials.email)\r\n        \r\n        if (!user) {\r\n            throw {\r\n                response: {\r\n                    status: 401,\r\n                    data: { message: 'Invalid email or password' }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // In real scenario, we'd verify password\r\n        const mockToken = `mock-token-${Date.now()}`\r\n        const userData = {\r\n            id: user.id,\r\n            email: user.email,\r\n            user_name: user.user_name,\r\n            full_name: user.full_name\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: {\r\n                token: mockToken,\r\n                user: userData\r\n            }\r\n        }\r\n    },\r\n    \r\n    getCurrentUserNew: async () => {\r\n        await mockDelay()\r\n        const token = localStorage.getItem('token')\r\n        const user = localStorage.getItem('user')\r\n        \r\n        if (!token || !user) {\r\n            throw new Error('No token')\r\n        }\r\n        \r\n        return {\r\n            status: 200,\r\n            data: JSON.parse(user)\r\n        }\r\n    }\r\n}\r\n\r\n// Export functions that switch between mock and real API\r\nexport const listAllBooks = () => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for listAllBooks')\r\n        return mockAPI.listAllBooks()\r\n    }\r\n    return axios.get(`${apiPreifx}/books`)\r\n}\r\n\r\nexport const readBook = (id) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for readBook:', id)\r\n        return mockAPI.readBook(id)\r\n    }\r\n    return axios.get(`${apiPreifx}/books/${id}`)\r\n}\r\n\r\nexport const search = (params) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for search:', params)\r\n        return mockAPI.search(params)\r\n    }\r\n    return axios.get(`${apiPreifx}/search`, { params })\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for getCurrentUser')\r\n        return mockAPI.getCurrentUser()\r\n    }\r\n    return axios.get(`/currentuser`)\r\n}\r\n\r\nexport const updateSeekTime = (userId, encodedChapterURL, seekPosition) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for updateSeekTime')\r\n        return mockAPI.updateSeekTime(userId, encodedChapterURL, seekPosition)\r\n    }\r\n    return axios.post(`${apiPreifx}/user/${userId}/bookchapter/${encodedChapterURL}/seek`, seekPosition)\r\n}\r\n\r\nexport const getSeek = (userId, encodedChapterURL) => {\r\n    if (useMockData) {\r\n        console.log('🔧 Using mock data for getSeek')\r\n        return mockAPI.getSeek(userId, encodedChapterURL)\r\n    }\r\n    return axios.get(`${apiPreifx}/user/${userId}/bookchapter/${encodedChapterURL}/seek`)\r\n}\r\n\r\n// AUTH ENDPOINTS - FORCE REAL API\r\nexport const registerUser = (userData) => {\r\n    console.log('🚀 Using REAL API for registerUser:', authApiUrl + '/register')\r\n    console.log('📤 Sending data:', userData)\r\n    return axios.post(`${authApiUrl}/register`, userData)\r\n}\r\n\r\nexport const loginUser = (credentials) => {\r\n    console.log('🚀 Using REAL API for loginUser:', authApiUrl + '/login')\r\n    console.log('📤 Sending credentials:', { email: credentials.email, password: '***' })\r\n    return axios.post(`${authApiUrl}/login`, credentials)\r\n}\r\n\r\n// USER PROFILE ENDPOINTS\r\nexport const getUserProfile = () => {\r\n    console.log('🚀 Using REAL API for getUserProfile:', userApiUrl + '/profile')\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(new Error('No token'))\r\n    return axios.get(`${userApiUrl}/profile`)\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    console.log('🚀 Using REAL API for logoutUser:', userApiUrl + '/logout')\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(new Error('No token'))\r\n    return axios.post(`${userApiUrl}/logout`)\r\n}\r\n\r\n// Legacy function - keep for compatibility\r\nexport const getCurrentUserNew = () => {\r\n    if (useMockData && !useRealAuthAPI) {\r\n        console.log('🔧 Using mock data for getCurrentUserNew')\r\n        return mockAPI.getCurrentUserNew()\r\n    }\r\n    return getUserProfile() // Use the correct profile endpoint\r\n}","D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\api\\mockData.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\User\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\utils\\promises.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Login\\index.js",[],["103","104"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\contexts\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\components\\ProtectedRoute\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\App.js",[],["105","106"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Audiobooks\\index.js",["107"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\customHooks\\useWindowDimensions.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Dashboard\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AdminRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\UserRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Profile\\index.js",["108"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport UserRepository from '../../repositories/UserRepository'\r\nimport { GlobalContext } from '../../contexts'\r\nimport './profile.css'\r\n\r\nfunction Profile() {\r\n    const history = useHistory()\r\n    const { user, setUser } = useContext(GlobalContext)\r\n    const [profile, setProfile] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [updating, setUpdating] = useState(false)\r\n    const [editFormData, setEditFormData] = useState({\r\n        userName: '',\r\n        email: '',\r\n        full_name: '',\r\n        alamat: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        document.title = \"Profile | The Book Hub\"\r\n        \r\n        // Redirect if not logged in\r\n        if (!user) {\r\n            history.push('/login')\r\n            return\r\n        }\r\n\r\n        loadProfile()\r\n    }, [user, history])\r\n\r\n    const loadProfile = async () => {\r\n        try {\r\n            setLoading(true)\r\n            console.log('Profile: Loading user profile via UserRepository...')\r\n            \r\n            // Use UserRepository instead of direct API call\r\n            const userData = await UserRepository.getCurrentUser()\r\n            \r\n            if (userData) {\r\n                console.log('Profile: UserRepository profile loaded:', userData)\r\n                setProfile(userData)\r\n                // Initialize edit form with current data\r\n                setEditFormData({\r\n                    userName: userData.user_name || '',\r\n                    email: userData.email || '',\r\n                    full_name: userData.full_name || '',\r\n                    alamat: userData.alamat || ''\r\n                })\r\n            } else {\r\n                throw new Error('No profile data received')\r\n            }\r\n        } catch (err) {\r\n            console.error('Profile: Error loading profile via UserRepository:', err)\r\n            setError('Failed to load profile')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleEditToggle = () => {\r\n        if (isEditing) {\r\n            // Cancel editing - reset form data\r\n            setEditFormData({\r\n                userName: profile.user_name || '',\r\n                email: profile.email || '',\r\n                full_name: profile.full_name || '',\r\n                alamat: profile.alamat || ''\r\n            })\r\n        }\r\n        setIsEditing(!isEditing)\r\n        setError('')\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target\r\n        setEditFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        // Validate form\r\n        if (!editFormData.userName.trim() || !editFormData.email.trim() || !editFormData.full_name.trim()) {\r\n            setError('Username, email, and full name are required')\r\n            return\r\n        }\r\n\r\n        // Email validation\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n        if (!emailRegex.test(editFormData.email)) {\r\n            setError('Please enter a valid email address')\r\n            return\r\n        }\r\n\r\n        try {\r\n            setUpdating(true)\r\n            setError('')\r\n\r\n            const updatedProfile = await UserRepository.updateUserProfile(editFormData)\r\n            \r\n            // Update local profile state\r\n            const newProfileData = {\r\n                ...profile,\r\n                user_name: editFormData.userName,\r\n                email: editFormData.email,\r\n                full_name: editFormData.full_name,\r\n                alamat: editFormData.alamat\r\n            }\r\n            \r\n            setProfile(newProfileData)\r\n            \r\n            // Update global context and localStorage\r\n            const updatedUser = {\r\n                ...user,\r\n                user_name: editFormData.userName,\r\n                email: editFormData.email,\r\n                full_name: editFormData.full_name,\r\n                alamat: editFormData.alamat\r\n            }\r\n            setUser(updatedUser)\r\n            localStorage.setItem('user', JSON.stringify(updatedUser))\r\n            \r\n            // Exit edit mode\r\n            setIsEditing(false)\r\n            \r\n            // Show success message\r\n            alert('Profile updated successfully!')\r\n            \r\n        } catch (error) {\r\n            console.error('Error updating profile:', error)\r\n            setError(error.message)\r\n        } finally {\r\n            setUpdating(false)\r\n        }\r\n    }\r\n\r\n    const getUserInitials = () => {\r\n        if (profile?.full_name) {\r\n            return profile.full_name\r\n                .split(' ')\r\n                .map(name => name.charAt(0))\r\n                .join('')\r\n                .toUpperCase()\r\n                .substring(0, 2)\r\n        }\r\n        if (profile?.user_name) {\r\n            return profile.user_name.substring(0, 2).toUpperCase()\r\n        }\r\n        return \"U\"\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"profile-container\">\r\n                <div className=\"profile-loading\">\r\n                    <div className=\"loading-spinner\"></div>\r\n                    <p>Loading profile via UserRepository...</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error && !profile) {\r\n        return (\r\n            <div className=\"profile-container\">\r\n                <div className=\"profile-error\">\r\n                    <h2>Error Loading Profile</h2>\r\n                    <p>{error || 'Profile not found'}</p>\r\n                    <button onClick={loadProfile} className=\"retry-btn\">\r\n                        Retry with UserRepository\r\n                    </button>\r\n                    <button onClick={() => history.push('/')} className=\"back-btn\">\r\n                        Go Back Home\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-container\">\r\n            <div className=\"profile-wrapper\">\r\n                <div className=\"profile-header\">\r\n                    <button onClick={() => history.goBack()} className=\"back-button\">\r\n                        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                            <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"/>\r\n                        </svg>\r\n                        Back\r\n                    </button>\r\n                    <h1>Profile Settings</h1>\r\n                    <div className=\"profile-actions\">\r\n                        <button \r\n                            onClick={handleEditToggle} \r\n                            className={`edit-profile-btn ${isEditing ? 'cancel' : 'edit'}`}\r\n                            disabled={updating}\r\n                        >\r\n                            {isEditing ? (\r\n                                <>\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\r\n                                    </svg>\r\n                                    Cancel\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                        <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\r\n                                    </svg>\r\n                                    Edit Profile\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                    <small style={{ color: '#94a3b8' }}>Powered by UserRepository Pattern</small>\r\n                </div>\r\n\r\n                {/* Error Display */}\r\n                {error && (\r\n                    <div className=\"profile-error-banner\">\r\n                        <strong>Error:</strong> {error}\r\n                        <button onClick={() => setError('')} className=\"error-close\">×</button>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"profile-content\">\r\n                    <div className=\"profile-avatar-section\">\r\n                        <div className=\"profile-avatar\">\r\n                            {getUserInitials()}\r\n                        </div>\r\n                        <div className=\"profile-basic-info\">\r\n                            <h2>{profile.full_name}</h2>\r\n                            <p className=\"profile-username\">@{profile.user_name}</p>\r\n                            <span className={`profile-role ${profile.role?.toLowerCase()}`}>\r\n                                {profile.role}\r\n                            </span>\r\n                            {profile.is_verified && (\r\n                                <span className=\"verified-badge\">\r\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n                                    </svg>\r\n                                    Verified\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {isEditing ? (\r\n                        /* Edit Form */\r\n                        <form onSubmit={handleSubmit} className=\"profile-edit-form\">\r\n                            <div className=\"profile-section\">\r\n                                <h3>Edit Personal Information</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field\">\r\n                                        <label htmlFor=\"full_name\">Full Name *</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"full_name\"\r\n                                            name=\"full_name\"\r\n                                            value={editFormData.full_name}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            className=\"profile-input\"\r\n                                            placeholder=\"Enter your full name\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label htmlFor=\"userName\">Username *</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"userName\"\r\n                                            name=\"userName\"\r\n                                            value={editFormData.userName}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            className=\"profile-input\"\r\n                                            placeholder=\"Enter your username\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label htmlFor=\"email\">Email *</label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            id=\"email\"\r\n                                            name=\"email\"\r\n                                            value={editFormData.email}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            className=\"profile-input\"\r\n                                            placeholder=\"Enter your email\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-field full-width\">\r\n                                        <label htmlFor=\"alamat\">Address</label>\r\n                                        <textarea\r\n                                            id=\"alamat\"\r\n                                            name=\"alamat\"\r\n                                            value={editFormData.alamat}\r\n                                            onChange={handleInputChange}\r\n                                            className=\"profile-textarea\"\r\n                                            placeholder=\"Enter your address\"\r\n                                            rows=\"3\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"profile-form-actions\">\r\n                                <button \r\n                                    type=\"button\" \r\n                                    onClick={handleEditToggle}\r\n                                    className=\"btn-cancel\"\r\n                                    disabled={updating}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button \r\n                                    type=\"submit\" \r\n                                    className=\"btn-save\"\r\n                                    disabled={updating}\r\n                                >\r\n                                    {updating ? (\r\n                                        <>\r\n                                            <div className=\"btn-spinner\"></div>\r\n                                            Updating...\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n                                            </svg>\r\n                                            Save Changes\r\n                                        </>\r\n                                    )}\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    ) : (\r\n                        /* View Mode */\r\n                        <div className=\"profile-details\">\r\n                            <div className=\"profile-section\">\r\n                                <h3>Personal Information</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Full Name</label>\r\n                                        <div className=\"field-value\">{profile.full_name}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Username</label>\r\n                                        <div className=\"field-value\">{profile.user_name}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Email</label>\r\n                                        <div className=\"field-value\">{profile.email}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Role</label>\r\n                                        <div className=\"field-value\">{profile.role}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"profile-section\">\r\n                                <h3>Location Information</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field full-width\">\r\n                                        <label>Address</label>\r\n                                        <div className=\"field-value\">{profile.alamat || 'Not specified'}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Latitude</label>\r\n                                        <div className=\"field-value\">{profile.latitude || 'Not specified'}</div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Longitude</label>\r\n                                        <div className=\"field-value\">{profile.longitude || 'Not specified'}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"profile-section\">\r\n                                <h3>Account Status</h3>\r\n                                <div className=\"profile-grid\">\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Verification Status</label>\r\n                                        <div className={`field-value status ${profile.is_verified ? 'verified' : 'unverified'}`}>\r\n                                            {profile.is_verified ? (\r\n                                                <>\r\n                                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n                                                    </svg>\r\n                                                    Verified\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                                        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n                                                    </svg>\r\n                                                    Not Verified\r\n                                                </>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"profile-field\">\r\n                                        <label>Account ID</label>\r\n                                        <div className=\"field-value monospace\">{profile.id}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile",["109","110"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\Admin\\Users\\index.js",["111"],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\pages\\ListingPage\\index.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\SystemRepository.js",[],"D:\\Kampus\\SEMESTER 6\\PPL\\nerdify-audiobook\\frontend\\src\\repositories\\AudiobooksRepository.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":17,"nodeType":"118","messageId":"119","endLine":1,"endColumn":27},{"ruleId":"120","severity":1,"message":"121","line":9,"column":13,"nodeType":"122","endLine":9,"endColumn":44},{"ruleId":"112","replacedBy":"123"},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","severity":1,"message":"125","line":2,"column":35,"nodeType":"118","messageId":"119","endLine":2,"endColumn":43},{"ruleId":"126","severity":1,"message":"127","line":128,"column":13,"nodeType":"128","messageId":"129","endLine":133,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":160,"column":13,"nodeType":"128","messageId":"129","endLine":165,"endColumn":14},{"ruleId":"112","replacedBy":"130"},{"ruleId":"114","replacedBy":"131"},{"ruleId":"112","replacedBy":"132"},{"ruleId":"114","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":47,"column":8,"nodeType":"136","endLine":47,"endColumn":21,"suggestions":"137"},{"ruleId":"116","severity":1,"message":"138","line":105,"column":19,"nodeType":"118","messageId":"119","endLine":105,"endColumn":33},{"ruleId":"112","replacedBy":"139"},{"ruleId":"114","replacedBy":"140"},{"ruleId":"116","severity":1,"message":"141","line":19,"column":12,"nodeType":"118","messageId":"119","endLine":19,"endColumn":21},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["142"],["143"],"'mockUser' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object",["142"],["143"],["142"],["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchQuery'. Either include it or remove the dependency array.","ArrayExpression",["144"],"'updatedProfile' is assigned a value but never used.",["142"],["143"],"'debugInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [currentPage, searchQuery]",{"range":"147","text":"148"},[1917,1930],"[currentPage, searchQuery]"]